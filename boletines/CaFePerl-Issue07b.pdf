%PDF-1.2
%‚„œ”
1 0 obj
[/CalRGB
<<
/WhitePoint [0.9505 1 1.089]
/Gamma [1.8 1.8 1.8]
/Matrix [0.4497 0.2446 0.02518 0.3613 0.672 0.1412 0.1845 0.08334 0.9227]
>>
]
endobj
2 0 obj
<<
/CreationDate (D:20060312231739-0300)
/Producer (pod2pdf)
/Title (Cafe Perl v0.7b)
>>
endobj
5 0 obj
<<
/Type /Encoding
/Differences [ 0 /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /space /exclam
/quotedbl /numbersign /dollar /percent /ampersand
/quoteright /parenleft /parenright /asterisk /plus /comma
/hyphen /period /slash /zero /one /two /three /four /five
/six /seven /eight /nine /colon /semicolon /less /equal
/greater /question /at /A /B /C /D /E /F /G /H /I /J /K /L
/M /N /O /P /Q /R /S /T /U /V /W /X /Y /Z /bracketleft
/backslash /bracketright /asciicircum /underscore
/quoteleft /a /b /c /d /e /f /g /h /i /j /k /l /m /n /o /p
/q /r /s /t /u /v /w /x /y /z /braceleft /bar /braceright
/asciitilde /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /emdash
/dotlessi /grave /acute /circumflex /tilde /macron /breve
/dotaccent /dieresis /.notdef /ring /cedilla /.notdef
/hungarumlaut /ogonek /caron /space /exclamdown /cent
/sterling /currency /yen /brokenbar /section /dieresis
/copyright /ordfeminine /guillemotleft /logicalnot /hyphen
/registered /macron /degree /plusminus /twosuperior
/threesuperior /acute /mu /paragraph /periodcentered
/cedilla /onesuperior /ordmasculine /guillemotright
/onequarter /onehalf /threequarters /questiondown /Agrave
/Aacute /Acircumflex /Atilde /Adieresis /Aring /AE
/Ccedilla /Egrave /Eacute /Ecircumflex /Edieresis /Igrave
/Iacute /Icircumflex /Idieresis /Eth /Ntilde /Ograve
/Oacute /Ocircumflex /Otilde /Odieresis /multiply /Oslash
/Ugrave /Uacute /Ucircumflex /Udieresis /Yacute /Thorn
/germandbls /agrave /aacute /acircumflex /atilde /adieresis
/aring /ae /ccedilla /egrave /eacute /ecircumflex
/edieresis /igrave /iacute /icircumflex /idieresis /eth
/ntilde /ograve /oacute /ocircumflex /otilde /odieresis
/divide /oslash /ugrave /uacute /ucircumflex /udieresis
/yacute /thorn /ydieresis ]
>>
endobj
6 0 obj
<<
/Type /Font
/Subtype /Type1
/Name /F00
/Encoding 5 0 R
/BaseFont /Times-Roman
>>
endobj
7 0 obj
<<
/Type /Font
/Subtype /Type1
/Name /F01
/Encoding 5 0 R
/BaseFont /Times-Bold
>>
endobj
8 0 obj
<<
/Type /Font
/Subtype /Type1
/Name /F02
/Encoding 5 0 R
/BaseFont /Times-Italic
>>
endobj
9 0 obj
<<
/Type /Font
/Subtype /Type1
/Name /F03
/Encoding 5 0 R
/BaseFont /Times-BoldItalic
>>
endobj
10 0 obj
<<
/Type /Font
/Subtype /Type1
/Name /F10
/Encoding 5 0 R
/BaseFont /Courier
>>
endobj
11 0 obj
<<
/Type /Font
/Subtype /Type1
/Name /F11
/Encoding 5 0 R
/BaseFont /Courier-Bold
>>
endobj
12 0 obj
<<
/Type /Font
/Subtype /Type1
/Name /F12
/Encoding 5 0 R
/BaseFont /Courier-Oblique
>>
endobj
13 0 obj
<<
/Type /Font
/Subtype /Type1
/Name /F13
/Encoding 5 0 R
/BaseFont /Courier-BoldOblique
>>
endobj
14 0 obj
<<
/Type /Font
/Subtype /Type1
/Name /F20
/Encoding 5 0 R
/BaseFont /Helvetica
>>
endobj
15 0 obj
<<
/Type /Font
/Subtype /Type1
/Name /F21
/Encoding 5 0 R
/BaseFont /Helvetica-Bold
>>
endobj
16 0 obj
<<
/Type /Font
/Subtype /Type1
/Name /F22
/Encoding 5 0 R
/BaseFont /Helvetica-Oblique
>>
endobj
17 0 obj
<<
/Type /Font
/Subtype /Type1
/Name /F23
/Encoding 5 0 R
/BaseFont /Helvetica-BoldOblique
>>
endobj
0 g
18 0 obj
<<
/Length 19 0 R
>>
stream
72 792 m
523 792 l
S
BT
0 G
1 i 0 J 0 j 0.1 w 10 M []0 d
/F21 10 Tf
1 0 0 1 72 797 Tm
(pod2pdf) Tj
1 0 0 1 451.3 797 Tm
(Cafe Perl v0.7b) Tj
/F21 10 Tf
1 0 0 1 72.0 752.0 Tm
0.0000 Tw
(Bits and Pieces - Scalars \(Mordiditas de aqu\355 y de all\341\) ) Tj
/F00 10 Tf
1 0 0 1 102.0 740.0 Tm
0.4095 Tw
(Que buena idea el poder escribir sobre algo que ya est\341 escrito y bien depurado \(como Perl\), pero que a) Tj
1 0 0 1 102.0 728.0 Tm
2.4361 Tw
(su vez est\341 en pleno per\355odo de ebullici\363n \(como Perl 6\) y que adem\341s ya tiene una gu\355a como) Tj
1 0 0 1 102.0 716.0 Tm
0.9218 Tw
("Programming Perl". En resumen : o es muuuuy aburrido \(porque est\341 todo dicho\) o hay que ser muy) Tj
1 0 0 1 102.0 704.0 Tm
0.4512 Tw
(brillante para poder encontrar esas cositas que andan por ah\355 perdidas y puedan adquirir luz propia \(que) Tj
1 0 0 1 102.0 692.0 Tm
0.0825 Tw
(no es mi caso\). En este caso simplemente se trata de poder entender mejor lo que hay, tratando de ver las) Tj
1 0 0 1 102.0 680.0 Tm
0.1037 Tw
(mejores pr\341cticas y elementos m\341s aprovechables de Perl 5 y ayudarnos a entender algunas cosas de Perl) Tj
1 0 0 1 102.0 668.0 Tm
0.0000 Tw
(6, o por lo menos para que cuando nos tengamos que meter de lleno no se nos haga la noche de repente. ) Tj
/F00 10 Tf
1 0 0 1 102.0 644.0 Tm
0.5633 Tw
(Y para comenzar que mejor que hacerlo con con el cap\355tulo 2 de "Programming Perl" : Bits and Pieces) Tj
1 0 0 1 102.0 632.0 Tm
0.0000 Tw
(!!! ) Tj
/F00 10 Tf
1 0 0 1 102.0 608.0 Tm
1.2187 Tw
(Los primeros pasos \(Atoms, Molecules y Built-in data types\) nos ayudan mas bien a comprender ese) Tj
1 0 0 1 102.0 596.0 Tm
1.6117 Tw
(nivel subyacente en Perl, y son mas parte de la filosof\355a \(qu tratamos en el "Mordidtas ..." del mes) Tj
1 0 0 1 102.0 584.0 Tm
0.8976 Tw
(anterior\), y los pasos siguientes \(Variables y Names\) nos adentran ya un poco m\341s en la parte te\363rica,) Tj
1 0 0 1 102.0 572.0 Tm
0.5559 Tw
(pero sin dejarnos una sustancia como para empezar a embebernos y tener algo de pr\341ctica. Para mi una) Tj
1 0 0 1 102.0 560.0 Tm
0.5690 Tw
(de las vedettes de Perl son los scalars, una especie de contenedor que todo lo abarca y que nos ayuda a) Tj
1 0 0 1 102.0 548.0 Tm
0.7760 Tw
(despreocuparnos de c\363mo tratar, donde ponerlo ni c\363mo almacenarlo : en definitiva algo as\355 como una) Tj
1 0 0 1 102.0 536.0 Tm
0.0000 Tw
(prenda "wash and wear" \(no se preocupe de detalles, s\363lo \372selo !!\). ) Tj
/F00 10 Tf
1 0 0 1 102.0 512.0 Tm
0.1044 Tw
(Sencillamente un scalar puede almacenar un n\372mero, un string, una referencia u otro dato \(que puede ser) Tj
1 0 0 1 102.0 500.0 Tm
0.1381 Tw
(un scalar o cualquier otro tipo de estructura\). Como caso particular puede no almacenar dato alguno, con) Tj
1 0 0 1 102.0 488.0 Tm
0.4000 Tw
(lo cual se haya solamente definida su estructura. Toda esta magia tiene sus efectos, no es gratis \(en Perl) Tj
1 0 0 1 102.0 476.0 Tm
0.0065 Tw
(5 simplemente existe y es "la" forma de almacenar un dato\) y todo lo que no hagamos nosotros lo hace la) Tj
1 0 0 1 102.0 464.0 Tm
0.0000 Tw
(CPU, que no es nada m\341s que un recurso que debemos saber usar. ) Tj
/F00 10 Tf
1 0 0 1 102.0 440.0 Tm
0.4668 Tw
(Empecemos por ver c\363mo internamente es el ciclo de vida de un scalar. Para esto vamos a usar el texto) Tj
1 0 0 1 102.0 428.0 Tm
0 Tw
(perlguts \(Introduction to the Perl API\) y a complementarlo con "PerlGuts Illustrated" \() Tj
1 0 0 1 102.0 416.0 Tm
0.0000 Tw
(http://gisle.aas.no/perl/illguts/ \). ) Tj
/F00 10 Tf
1 0 0 1 102.0 404.0 Tm
0.8171 Tw
(Para comprenderlo mejor vamos a usar el siguiente script que lo que hace es crear un scalar, asignarle) Tj
1 0 0 1 102.0 392.0 Tm
0.0000 Tw
(distintos valores a lo largo del mismo y ver su estructura interna : ) Tj
/F10 10 Tf
1 0 0 1 102.0 362.0 Tm
0.0000 Tw
( #!/usr/bin/perl ) Tj
1 0 0 1 102.0 338.0 Tm
0.0000 Tw
( use warnings; ) Tj
1 0 0 1 102.0 326.0 Tm
0.0000 Tw
( use strict; ) Tj
1 0 0 1 102.0 314.0 Tm
0.0000 Tw
( use Devel::Peek 'Dump'; ) Tj
1 0 0 1 102.0 290.0 Tm
0.0000 Tw
( my $var1; ) Tj
1 0 0 1 102.0 278.0 Tm
0.0000 Tw
( print "-" x 10 . " Cuando est\341 vac\355a no ocupa lugar \(NULL\) no hay memoria alocada\\n"; ) Tj
1 0 0 1 102.0 266.0 Tm
0.0000 Tw
( Dump $var1; ) Tj
1 0 0 1 102.0 254.0 Tm
0.0000 Tw
( print "\\n"; ) Tj
1 0 0 1 102.0 230.0 Tm
0.0000 Tw
( print "-" x 10 . " Lo pongo en contexto NUMBER \(IV\)\\n"; ) Tj
1 0 0 1 102.0 218.0 Tm
0.0000 Tw
( $var1 = 10; ) Tj
1 0 0 1 102.0 206.0 Tm
0.0000 Tw
( Dump $var1; ) Tj
1 0 0 1 102.0 194.0 Tm
0.0000 Tw
( print "\\n"; ) Tj
1 0 0 1 102.0 170.0 Tm
0.0000 Tw
( print "-" x 10 . " La fuerzo a ser interpretado como STRING \(PV\): " . $var1 . "\\n"; ) Tj
1 0 0 1 102.0 158.0 Tm
0.0000 Tw
( Dump $var1; ) Tj
1 0 0 1 102.0 146.0 Tm
0.0000 Tw
( print "\\n"; ) Tj
1 0 0 1 102.0 122.0 Tm
0.0000 Tw
( print "-" x 10 . " Nuevamente como INTEGER \(IV\) \\n"; ) Tj
1 0 0 1 102.0 110.0 Tm
0.0000 Tw
( $var1 += 99; ) Tj
1 0 0 1 102.0 98.0 Tm
0.0000 Tw
( Dump $var1; ) Tj
1 0 0 1 102.0 86.0 Tm
0.0000 Tw
( print "\\n"; ) Tj
/F21 10 Tf
1 0 0 1 72 37 Tm
(12 March 2006) Tj
1 0 0 1 517.44 37 Tm
(1) Tj
ET
72 50 m
523 50 l
S
endstream
endobj
19 0 obj
5137
endobj
20 0 obj
<<
/ProcSet [/PDF /Text]
/ColorSpace <</DefaultRGB 1 0 R>>
/Font
<<
/F00 6 0 R
/F10 10 0 R
/F21 15 0 R
>>
>>
endobj
21 0 obj
<<
/Type /Page
/Parent 4 0 R
/Resources 20 0 R
/Contents 18 0 R
>>
endobj
22 0 obj
<<
/Length 23 0 R
>>
stream
72 792 m
523 792 l
S
BT
0 G
1 i 0 J 0 j 0.1 w 10 M []0 d
/F21 10 Tf
1 0 0 1 72 797 Tm
(Cafe Perl v0.7b) Tj
1 0 0 1 483.56 797 Tm
(pod2pdf) Tj
/F10 10 Tf
1 0 0 1 102.0 758.0 Tm
0.0000 Tw
( print "-" x 10 . " Ahora como referencia \(RV\) \\n"; ) Tj
1 0 0 1 102.0 746.0 Tm
0.0000 Tw
( my $var2; ) Tj
1 0 0 1 102.0 734.0 Tm
0.0000 Tw
( $var1 = \\$var2; ) Tj
1 0 0 1 102.0 722.0 Tm
0.0000 Tw
( Dump $var1; ) Tj
1 0 0 1 102.0 710.0 Tm
0.0000 Tw
( print "\\n"; ) Tj
/F00 10 Tf
1 0 0 1 102.0 686.0 Tm
0.0193 Tw
(B\341sicamente cuando creamos un scalar sin asignarle ning\372n valor se genera una estructura b\341sica, simple) Tj
1 0 0 1 102.0 674.0 Tm
0.0000 Tw
(y com\372n a todos los tipos de datos que este puede albergar : ) Tj
/F10 10 Tf
1 0 0 1 102.0 644.0 Tm
0.0000 Tw
( SV = NULL\(0x0\) at 0x276cfc ) Tj
1 0 0 1 102.0 632.0 Tm
0.0000 Tw
(     REFCNT = 1 ) Tj
1 0 0 1 102.0 620.0 Tm
0.0000 Tw
(     FLAGS = \(PADBUSY,PADMY\) ) Tj
/F00 10 Tf
1 0 0 1 102.0 596.0 Tm
1.2918 Tw
(Puede verse que se gener\363 un scalar \(SV\) que est\341 vac\355o NULL\(0x0\) y fue marcado como para usar) Tj
1 0 0 1 102.0 584.0 Tm
0.0000 Tw
(dentro de un "my" \(PADBUSY,PADMY\). ) Tj
/F00 10 Tf
1 0 0 1 102.0 572.0 Tm
0.0000 Tw
(Si ahora ponemos un valor entero \(10 en nuestro caso\), la estructura es la siguiente : ) Tj
/F10 10 Tf
1 0 0 1 102.0 542.0 Tm
0.0000 Tw
( SV = IV\(0x1930454\) at 0x276cfc ) Tj
1 0 0 1 102.0 530.0 Tm
0.0000 Tw
(     REFCNT = 1 ) Tj
1 0 0 1 102.0 518.0 Tm
0.0000 Tw
(     FLAGS = \(PADBUSY,PADMY,IOK,pIOK\) ) Tj
1 0 0 1 102.0 506.0 Tm
0.0000 Tw
(     IV = 10 ) Tj
/F00 10 Tf
1 0 0 1 102.0 482.0 Tm
0.1842 Tw
(Ahora el cambio es m\355nimo porque se agrega solamente el valor entero \(IV = 10\) y los flags que indican) Tj
1 0 0 1 102.0 470.0 Tm
0.4633 Tw
(el cambio a entero \(IOK,pIOK\). si en lugar de un entero \(IV\) us\341ramos un valor con decimales \(NV\) el) Tj
1 0 0 1 102.0 458.0 Tm
0.0000 Tw
(caso ser\355a similar. ) Tj
/F00 10 Tf
1 0 0 1 102.0 446.0 Tm
0.0000 Tw
(Pero vayamos un paso mas adelante y forcemos la interpretaci\363n de $var1 como un string \(PV\) : ) Tj
/F10 10 Tf
1 0 0 1 102.0 416.0 Tm
0.0000 Tw
( SV = PVIV\(0x277dbc\) at 0x276cfc ) Tj
1 0 0 1 102.0 404.0 Tm
0.0000 Tw
(     REFCNT = 1 ) Tj
1 0 0 1 102.0 392.0 Tm
0.0000 Tw
(     FLAGS = \(PADBUSY,PADMY,IOK,POK,pIOK,pPOK\) ) Tj
1 0 0 1 102.0 380.0 Tm
0.0000 Tw
(     IV = 10 ) Tj
1 0 0 1 102.0 368.0 Tm
0.0000 Tw
(     PV = 0x27f43c "10"\\0 ) Tj
1 0 0 1 102.0 356.0 Tm
0.0000 Tw
(     CUR = 2 ) Tj
1 0 0 1 102.0 344.0 Tm
0.0000 Tw
(     LEN = 3 ) Tj
/F00 10 Tf
1 0 0 1 102.0 320.0 Tm
1.0815 Tw
(Lo notorio de este caso es que se transforma no en un string sino en un n\372mero que puede ser usado) Tj
1 0 0 1 102.0 308.0 Tm
1.9357 Tw
(como string \(PVIV\) agreg\341ndose tres campos m\341s : la representaci\363n como string \(PV = 0x27f43c) Tj
1 0 0 1 102.0 296.0 Tm
1.0772 Tw
("10"\\0\), su longitud total \(LEN = 3\) y la longitud real o usada \(CUR = 2\). Tambi\351n aparecen nuevos) Tj
1 0 0 1 102.0 284.0 Tm
0.0000 Tw
(flags indicando que es v\341lido como string \(POK y pPOK\). ) Tj
/F00 10 Tf
1 0 0 1 102.0 272.0 Tm
0.2393 Tw
(Para ser molestos, como de costumbre, vamos a forzarlo nuevamente en el entorno entero \(sum\341ndole el) Tj
1 0 0 1 102.0 260.0 Tm
0.0000 Tw
(valor 99\) y ver que pasa : ) Tj
/F10 10 Tf
1 0 0 1 102.0 230.0 Tm
0.0000 Tw
( SV = PVIV\(0x277dbc\) at 0x276cfc ) Tj
1 0 0 1 102.0 218.0 Tm
0.0000 Tw
(     REFCNT = 1 ) Tj
1 0 0 1 102.0 206.0 Tm
0.0000 Tw
(     FLAGS = \(PADBUSY,PADMY,IOK,pIOK\) ) Tj
1 0 0 1 102.0 194.0 Tm
0.0000 Tw
(     IV = 109 ) Tj
1 0 0 1 102.0 182.0 Tm
0.0000 Tw
(     PV = 0x27f43c "10"\\0 ) Tj
1 0 0 1 102.0 170.0 Tm
0.0000 Tw
(     CUR = 2 ) Tj
1 0 0 1 102.0 158.0 Tm
0.0000 Tw
(     LEN = 3 ) Tj
/F00 10 Tf
1 0 0 1 102.0 134.0 Tm
1.3422 Tw
(Por suerte ya han dejado de aparecer nuevos campos, pero si prestamos atenci\363n se ve que ya no se) Tj
1 0 0 1 102.0 122.0 Tm
0.5689 Tw
(indica que el valor string es v\341lido \(desaparecen los flags POK y pPOK\) y el valor de este scalar como) Tj
1 0 0 1 102.0 110.0 Tm
0.0000 Tw
(string \(PV\) ya no coincide con el valor entero \(IV\). ) Tj
/F00 10 Tf
1 0 0 1 102.0 98.0 Tm
0.1850 Tw
(Ni que contar que cuando se le asigna una referencia ya perdemos totalmente el manejo de lo que podr\355a) Tj
1 0 0 1 102.0 86.0 Tm
0.0000 Tw
(ser una persona en su sano juicio : ) Tj
/F10 10 Tf
/F21 10 Tf
1 0 0 1 72 37 Tm
(2) Tj
1 0 0 1 454.63 37 Tm
(12 March 2006) Tj
ET
72 50 m
523 50 l
S
endstream
endobj
23 0 obj
4469
endobj
24 0 obj
<<
/ProcSet [/PDF /Text]
/ColorSpace <</DefaultRGB 1 0 R>>
/Font
<<
/F00 6 0 R
/F10 10 0 R
/F21 15 0 R
>>
>>
endobj
25 0 obj
<<
/Type /Page
/Parent 4 0 R
/Resources 24 0 R
/Contents 22 0 R
>>
endobj
26 0 obj
<<
/Length 27 0 R
>>
stream
72 792 m
523 792 l
S
BT
0 G
1 i 0 J 0 j 0.1 w 10 M []0 d
/F21 10 Tf
1 0 0 1 72 797 Tm
(pod2pdf) Tj
1 0 0 1 451.3 797 Tm
(Cafe Perl v0.7b) Tj
/F00 10 Tf
1 0 0 1 102.0 770.0 Tm
0.0000 Tw
( SV = PVIV\(0x277dbc\) at 0x276cfc ) Tj
1 0 0 1 102.0 758.0 Tm
0.0000 Tw
(     REFCNT = 1 ) Tj
1 0 0 1 102.0 746.0 Tm
0.0000 Tw
(     FLAGS = \(PADBUSY,PADMY,ROK\) ) Tj
1 0 0 1 102.0 734.0 Tm
0.0000 Tw
(     IV = 109 ) Tj
1 0 0 1 102.0 722.0 Tm
0.0000 Tw
(     RV = 0x1978320 ) Tj
1 0 0 1 102.0 710.0 Tm
0.0000 Tw
(     SV = NULL\(0x0\) at 0x1978320 ) Tj
1 0 0 1 102.0 698.0 Tm
0.0000 Tw
(         REFCNT = 2 ) Tj
1 0 0 1 102.0 686.0 Tm
0.0000 Tw
(         FLAGS = \(PADBUSY,PADMY\) ) Tj
1 0 0 1 102.0 674.0 Tm
0.0000 Tw
(     PV = 0x1978320 "" ) Tj
1 0 0 1 102.0 662.0 Tm
0.0000 Tw
(     CUR = 0 ) Tj
1 0 0 1 102.0 650.0 Tm
0.0000 Tw
(     LEN = 0 ) Tj
/F00 10 Tf
1 0 0 1 102.0 626.0 Tm
0.6287 Tw
(Particularmente han desaparecido todos los flags relativos a valores IV o PV, aparece el flag indicando) Tj
1 0 0 1 102.0 614.0 Tm
0.3871 Tw
(que es una referencia \(RV\), pero curiosamente el valor entero IV sigue existiendo \(IV = 109\) y tambi\351n) Tj
1 0 0 1 102.0 602.0 Tm
0.0000 Tw
(su representaci\363n string \(PV = 0x1978320 ""\) pero aparentemente vac\355o \(CUR = 0 y LEN = 0\). ) Tj
/F00 10 Tf
1 0 0 1 102.0 578.0 Tm
0.7800 Tw
(Como conclusi\363n esto presenta una dualidad que, adem\341s de ser pr\341ctica porque nos evita el tener que) Tj
1 0 0 1 102.0 566.0 Tm
0.1473 Tw
(declarar distintos tipos de variables, va a ser necesario mantenerla y ser manejada por la implementaci\363n) Tj
1 0 0 1 102.0 554.0 Tm
0.4838 Tw
(de Perl, lo que requiere l\355neas de c\363digo que aumentan la complejidad y disminuyen la performance. Si) Tj
1 0 0 1 102.0 542.0 Tm
0.1072 Tw
(bien vemos que se intenta hacer un uso bastante racional de los recursos \(por ejemplo, cuando se pasa de) Tj
1 0 0 1 102.0 530.0 Tm
0.4461 Tw
(string nuevamente e integer no se actualiza el valor PV sino que se deja desactualizado, y solo lo estar\341) Tj
1 0 0 1 102.0 518.0 Tm
0.0000 Tw
(la pr\363xima vez que sea evaluado en contexto string\), esto tiene su impacto. ) Tj
/F00 10 Tf
1 0 0 1 102.0 494.0 Tm
1.7085 Tw
(Si les interesa analizar como se hace el upgrade de un tipo de datos a otro, se pueden acercar a la) Tj
1 0 0 1 102.0 482.0 Tm
0.0856 Tw
(distribuci\363n de Perl en forma de source, buscar el archivo sv.c, all\355 dentro la funci\363n Perl_sv_upgrade\(\) \)) Tj
1 0 0 1 102.0 470.0 Tm
0.0000 Tw
(y junto con "PerlGuts Illustrated" \(http://gisle.aas.no/perl/illguts/\) van a poder seguirlo de cerca. ) Tj
/F00 10 Tf
1 0 0 1 102.0 446.0 Tm
0.1287 Tw
(Volviendo al impacto en performance, vamos a volver a nuestro amigo Benchmark, a tratar de visualizar) Tj
1 0 0 1 102.0 434.0 Tm
0.3527 Tw
(si existe realmente esta diferencia de performance, si es detectable y tratar de cuantificarla. En principio) Tj
1 0 0 1 102.0 422.0 Tm
0.2106 Tw
(vamos a trabajar con dos arrays de 1000 elementos \(uno con n\372meros y el otro con n\372meros convertidos) Tj
1 0 0 1 102.0 410.0 Tm
0.0000 Tw
(s string\), los que simplemente vamos a recorrer linealmente e incrementar cada uno de sus elementos : ) Tj
/F10 10 Tf
1 0 0 1 102.0 380.0 Tm
0.0000 Tw
( #!/usr/bin/perl ) Tj
1 0 0 1 102.0 356.0 Tm
0.0000 Tw
( use warnings; ) Tj
1 0 0 1 102.0 344.0 Tm
0.0000 Tw
( use strict; ) Tj
1 0 0 1 102.0 332.0 Tm
0.0000 Tw
( use Benchmark qw\(:all\) ; ) Tj
1 0 0 1 102.0 308.0 Tm
0.0000 Tw
( my $secs = shift || 1; ## segundos de CPU que dura el test ) Tj
1 0 0 1 102.0 296.0 Tm
0.0000 Tw
( my $n = 1000; ## cant. de elementos de cada array ) Tj
1 0 0 1 102.0 272.0 Tm
0.0000 Tw
( ## ) Tj
1 0 0 1 102.0 260.0 Tm
0.0000 Tw
( ## La idea de este script es mostrar la diferencia de performance ) Tj
1 0 0 1 102.0 248.0 Tm
0.0000 Tw
( ## entre un numero puro \(IV\) y un numero en contexto string \(PVIV\) ) Tj
1 0 0 1 102.0 236.0 Tm
0.0000 Tw
( ## ) Tj
1 0 0 1 102.0 212.0 Tm
0.0000 Tw
( my $varString = 99; # defino el scalar y almaceno un numero \(IV\) ) Tj
1 0 0 1 102.0 200.0 Tm
0.0000 Tw
( $varString .= ""; # ... pero ahora lo convierto a string \(PVIV\) forzandolo ) Tj
1 0 0 1 102.0 188.0 Tm
0.0000 Tw
( # a ser interpretado en un contexto string ) Tj
1 0 0 1 102.0 164.0 Tm
0.0000 Tw
( my $varNum = 99; # scalar s\363lo numerico \(IV\) ) Tj
1 0 0 1 102.0 140.0 Tm
0.0000 Tw
( ## ... y despu\351s corro el test ) Tj
1 0 0 1 102.0 116.0 Tm
0.0000 Tw
( my @arrayIV; ) Tj
1 0 0 1 102.0 104.0 Tm
0.0000 Tw
( my @arrayPVIV; ) Tj
1 0 0 1 102.0 80.0 Tm
0.0000 Tw
( for my $i \(0..\($n-1\)\) \{ ) Tj
1 0 0 1 102.0 68.0 Tm
0.0000 Tw
(     $arrayPVIV[$i] = $varString; ) Tj
/F21 10 Tf
1 0 0 1 72 37 Tm
(12 March 2006) Tj
1 0 0 1 517.44 37 Tm
(3) Tj
ET
72 50 m
523 50 l
S
endstream
endobj
27 0 obj
4727
endobj
28 0 obj
<<
/ProcSet [/PDF /Text]
/ColorSpace <</DefaultRGB 1 0 R>>
/Font
<<
/F00 6 0 R
/F10 10 0 R
/F21 15 0 R
>>
>>
endobj
29 0 obj
<<
/Type /Page
/Parent 4 0 R
/Resources 28 0 R
/Contents 26 0 R
>>
endobj
30 0 obj
<<
/Length 31 0 R
>>
stream
72 792 m
523 792 l
S
BT
0 G
1 i 0 J 0 j 0.1 w 10 M []0 d
/F21 10 Tf
1 0 0 1 72 797 Tm
(Cafe Perl v0.7b) Tj
1 0 0 1 483.56 797 Tm
(pod2pdf) Tj
/F10 10 Tf
1 0 0 1 102.0 758.0 Tm
0.0000 Tw
(     $arrayIV[$i] = $varNum; ) Tj
1 0 0 1 102.0 746.0 Tm
0.0000 Tw
( \}; ) Tj
1 0 0 1 102.0 722.0 Tm
0.0000 Tw
( my $result = timethese\( \(-$secs\), \{ ) Tj
1 0 0 1 102.0 710.0 Tm
0.0000 Tw
(     IV => sub\{ ) Tj
1 0 0 1 102.0 698.0 Tm
0.0000 Tw
(             for my $i \(0..\($n-1\)\) \{ ) Tj
1 0 0 1 102.0 686.0 Tm
0.0000 Tw
(                 $arrayIV[$i]++; ) Tj
1 0 0 1 102.0 674.0 Tm
0.0000 Tw
(             \}; ) Tj
1 0 0 1 102.0 662.0 Tm
0.0000 Tw
(         \}, ) Tj
1 0 0 1 102.0 650.0 Tm
0.0000 Tw
(     PVIV => sub\{ ) Tj
1 0 0 1 102.0 638.0 Tm
0.0000 Tw
(             for my $i \(0..\($n-1\)\) \{ ) Tj
1 0 0 1 102.0 626.0 Tm
0.0000 Tw
(                 $arrayPVIV[$i]++; ) Tj
1 0 0 1 102.0 614.0 Tm
0.0000 Tw
(             \}; ) Tj
1 0 0 1 102.0 602.0 Tm
0.0000 Tw
(         \}, ) Tj
1 0 0 1 102.0 590.0 Tm
0.0000 Tw
(     \} \); ) Tj
1 0 0 1 102.0 566.0 Tm
0.0000 Tw
( cmpthese\( $result \); ) Tj
/F00 10 Tf
1 0 0 1 102.0 542.0 Tm
1.4853 Tw
(Ejecutando este script con 5 segundos de CPU dio una ventaja de performance entre el 10% y 30%) Tj
1 0 0 1 102.0 530.0 Tm
3.3329 Tw
(usando el array que posee valores num\351ricos \(IV\) versus el que posee valores num\351ricos pero) Tj
1 0 0 1 102.0 518.0 Tm
0.4936 Tw
(almacenados tambi\351n como strings \(PVIV\). Si ahora hacemos una prueba similar pero haciendo un sort) Tj
1 0 0 1 102.0 506.0 Tm
0.0000 Tw
(sobre un array de 1000 generados al azar : ) Tj
/F10 10 Tf
1 0 0 1 102.0 476.0 Tm
0.0000 Tw
( #!/usr/bin/perl ) Tj
1 0 0 1 102.0 452.0 Tm
0.0000 Tw
( use warnings; ) Tj
1 0 0 1 102.0 440.0 Tm
0.0000 Tw
( use strict; ) Tj
1 0 0 1 102.0 428.0 Tm
0.0000 Tw
( use Benchmark qw\(:all\) ; ) Tj
1 0 0 1 102.0 404.0 Tm
0.0000 Tw
( my $secs = shift || 1; ) Tj
1 0 0 1 102.0 392.0 Tm
0.0000 Tw
( my $n = 1000; ## elementos del array ) Tj
1 0 0 1 102.0 368.0 Tm
0.0000 Tw
( ## ) Tj
1 0 0 1 102.0 356.0 Tm
0.0000 Tw
( ## La idea de este script es mostrar la diferencia de performance ) Tj
1 0 0 1 102.0 344.0 Tm
0.0000 Tw
( ## entre un numero puro \(IV\) y un numero en contexto string \(PVIV\) ) Tj
1 0 0 1 102.0 332.0 Tm
0.0000 Tw
( ## ) Tj
1 0 0 1 102.0 308.0 Tm
0.0000 Tw
( my @arrayIV; ) Tj
1 0 0 1 102.0 296.0 Tm
0.0000 Tw
( my @arrayPVIV; ) Tj
1 0 0 1 102.0 272.0 Tm
0.0000 Tw
( getArrayRandom\( \\@arrayIV, $n \); ) Tj
1 0 0 1 102.0 260.0 Tm
0.0000 Tw
( for my $i \(0..$n-1\) \{ ) Tj
1 0 0 1 102.0 248.0 Tm
0.0000 Tw
(     $arrayPVIV[$i] = $arrayIV[$i]; ## fuerzo a cada elemento a ser n\372mero \(IV\) ) Tj
1 0 0 1 102.0 236.0 Tm
0.0000 Tw
(     $arrayPVIV[$i] .= ""; ## y a convertirse en string \(PVIV\) ) Tj
1 0 0 1 102.0 224.0 Tm
0.0000 Tw
( \}; ) Tj
1 0 0 1 102.0 200.0 Tm
0.0000 Tw
( ## ... y despu\351s corro el test ) Tj
1 0 0 1 102.0 176.0 Tm
0.0000 Tw
( my $result = timethese\( \(-$secs\), \{ ) Tj
1 0 0 1 102.0 164.0 Tm
0.0000 Tw
(     IV => sub\{    sort @arrayIV    \}, ) Tj
1 0 0 1 102.0 152.0 Tm
0.0000 Tw
(     PVIV => sub\{    sort @arrayPVIV;    \}, ) Tj
1 0 0 1 102.0 140.0 Tm
0.0000 Tw
(     \} \); ) Tj
1 0 0 1 102.0 116.0 Tm
0.0000 Tw
( cmpthese\( $result \); ) Tj
1 0 0 1 102.0 92.0 Tm
0.0000 Tw
( sub getArrayRandom\($$\) \{ ) Tj
1 0 0 1 102.0 80.0 Tm
0.0000 Tw
(     my $ref = shift; ) Tj
1 0 0 1 102.0 68.0 Tm
0.0000 Tw
(     my $items = shift; ) Tj
/F21 10 Tf
1 0 0 1 72 37 Tm
(4) Tj
1 0 0 1 454.63 37 Tm
(12 March 2006) Tj
ET
72 50 m
523 50 l
S
endstream
endobj
31 0 obj
3526
endobj
32 0 obj
<<
/ProcSet [/PDF /Text]
/ColorSpace <</DefaultRGB 1 0 R>>
/Font
<<
/F00 6 0 R
/F10 10 0 R
/F21 15 0 R
>>
>>
endobj
33 0 obj
<<
/Type /Page
/Parent 4 0 R
/Resources 32 0 R
/Contents 30 0 R
>>
endobj
34 0 obj
<<
/Length 35 0 R
>>
stream
72 792 m
523 792 l
S
BT
0 G
1 i 0 J 0 j 0.1 w 10 M []0 d
/F21 10 Tf
1 0 0 1 72 797 Tm
(pod2pdf) Tj
1 0 0 1 451.3 797 Tm
(Cafe Perl v0.7b) Tj
/F10 10 Tf
1 0 0 1 102.0 758.0 Tm
0.0000 Tw
(     for my $i \(0..\($items-1\)\) \{ ) Tj
1 0 0 1 102.0 746.0 Tm
0.0000 Tw
(         my $len = int\( rand\(6\) \) + 1; ## entero de hasta 5 d\355gitos ) Tj
1 0 0 1 102.0 734.0 Tm
0.0000 Tw
(         my $num = int\( rand\( 1 \) * 10**$len \); ) Tj
1 0 0 1 102.0 722.0 Tm
0.0000 Tw
(         push @$ref, $num; ) Tj
1 0 0 1 102.0 710.0 Tm
0.0000 Tw
(     \}; ) Tj
1 0 0 1 102.0 698.0 Tm
0.0000 Tw
( \}; ) Tj
/F00 10 Tf
1 0 0 1 102.0 674.0 Tm
1.6683 Tw
(En este caso la diferencias de performance fueron entre el 30% y 50% a favor del array que posee) Tj
1 0 0 1 102.0 662.0 Tm
0.0000 Tw
(n\372meros convertidos a strings \(PVIV\) debido a que la comparaci\363n default de sort\(\) es string. ) Tj
/F00 10 Tf
1 0 0 1 102.0 638.0 Tm
0.8545 Tw
(Se repite con esto el viejo dicho "lo que no te mata te fortalece", porque la ventaja no ser un lenguaje) Tj
1 0 0 1 102.0 626.0 Tm
0.4262 Tw
(tipado \(no poseer tipos de datos como C, C++ o Java\) en cierta forma mata a Perl. Pero bien no todo es) Tj
1 0 0 1 102.0 614.0 Tm
0.5725 Tw
(malo, porque para el pr\363ximo release \(Perl 6\) se est\341 haciendo que puedan definirse las variables como) Tj
1 0 0 1 102.0 602.0 Tm
0.0376 Tw
(del tipo que se va a usar, lo cual permite evitar este tipo de penalizaciones. Un ejemplo simple en Perl 6 :) Tj
/F10 10 Tf
1 0 0 1 102.0 560.0 Tm
0.0000 Tw
( #!/usr/bin/pugs ) Tj
1 0 0 1 102.0 536.0 Tm
0.0000 Tw
( use v6; ) Tj
1 0 0 1 102.0 512.0 Tm
0.0000 Tw
( my int $var1 = 10; ) Tj
1 0 0 1 102.0 500.0 Tm
0.0000 Tw
( $var1.say\(\); ) Tj
/F00 10 Tf
1 0 0 1 102.0 476.0 Tm
0.0157 Tw
(En principio defino que voy a usar pugs como int\351rprete \(#!/usr/bin/pugs, primer implementaci\363n de Perl) Tj
1 0 0 1 102.0 464.0 Tm
0.0886 Tw
(6\) y que va a ser Perl 6 \(use v6\). Despu\351s defino que hay una variable llamada $var1 que va a ser integer) Tj
1 0 0 1 102.0 452.0 Tm
1.5286 Tw
(y que es inicializada con el valor 10 \(my int $var1 = 10\) ... y de paso te recomiendo que si quer\351s) Tj
1 0 0 1 102.0 440.0 Tm
0.0000 Tw
(empezar a embeberte ya de Perl 6 pod\351s usar Pugs \( http://www.pugcode.org \). ) Tj
/F00 10 Tf
1 0 0 1 102.0 416.0 Tm
0.0350 Tw
(Con esto se reduce el problema de definir y reusar la variable $var1 como un string, pero realmente "Perl) Tj
1 0 0 1 102.0 404.0 Tm
0.5578 Tw
(seguir\341 siendo Perl" y por lo tanto va a seguir permitiendo que se almacenen strings, con lo cual puedo) Tj
1 0 0 1 102.0 392.0 Tm
0.0000 Tw
(seguir haciendo : ) Tj
/F10 10 Tf
1 0 0 1 102.0 362.0 Tm
0.0000 Tw
( $var1 = "Hola"; ) Tj
/F00 10 Tf
1 0 0 1 102.0 338.0 Tm
0.0720 Tw
(Entonces, d\363nde est\341 la ganancia. Claramente, y en un primer punto, en la implementaci\363n. En particular) Tj
1 0 0 1 102.0 326.0 Tm
0.4985 Tw
(si hacemos este manejo Perl 6 se va a comportar distinto que Perl 5, no haciendo cache de este valor, y) Tj
1 0 0 1 102.0 314.0 Tm
0.0000 Tw
(convirtiendo de integer a string cada vez que lo requiera y almacenando s\363lo el valor integer. ) Tj
/F00 10 Tf
1 0 0 1 102.0 290.0 Tm
0.7707 Tw
(Lamentablemente a\372n no est\341 la implementaci\363n definitiva de Perl 6 \(sobre Parrot, la m\341quina virtual\)) Tj
1 0 0 1 102.0 278.0 Tm
0.2582 Tw
(con lo cual al momento esto es s\363lo una promesa \(digamos que puede estar implementado en Pugs, pero) Tj
1 0 0 1 102.0 266.0 Tm
0.0000 Tw
(no me atrever\355a a tomar como una implementaci\363n final con la cual hablar sobre performance\). ) Tj
/F23 10 Tf
1 0 0 1 102.0 239.6 Tm
0.0000 Tw
(Infograf\355a ) Tj
/F20 10 Tf
1 0 0 1 102.0 225.2 Tm
0.0000 Tw
() Tj
ET
q
102 226.2 4 4 re
f
Q
BT
1 0 0 1 110 225.2 Tm
/F20 10 Tf
0.0000 Tw
(- CPAN \( http://www.cpan.org \) ) Tj
/F20 10 Tf
1 0 0 1 102.0 210.8 Tm
0.0000 Tw
() Tj
ET
q
102 211.8 4 4 re
f
Q
BT
1 0 0 1 110 210.8 Tm
/F20 10 Tf
0.0000 Tw
(- M\363dulo Benchmark \( http://search.cpan.org/~nwclark/perl- 5.8.7/lib/Benchmark.pm \) ) Tj
/F20 10 Tf
1 0 0 1 102.0 196.4 Tm
0.0000 Tw
() Tj
ET
q
102 197.4 4 4 re
f
Q
BT
1 0 0 1 110 196.4 Tm
/F20 10 Tf
0.0000 Tw
(- M\363dulo Devel::Peek \( http://search.cpan.org/~ilyaz/Devel-Peek-0.96/Peek.pm \) ) Tj
/F20 10 Tf
1 0 0 1 102.0 182.0 Tm
0.0000 Tw
() Tj
ET
q
102 183 4 4 re
f
Q
BT
1 0 0 1 110 182 Tm
/F20 10 Tf
0.0000 Tw
(- Pugs \( http://www.pugscode.org \) ) Tj
/F20 10 Tf
1 0 0 1 102.0 167.6 Tm
0.0000 Tw
() Tj
ET
q
102 168.6 4 4 re
f
Q
BT
1 0 0 1 110 167.6 Tm
/F20 10 Tf
0.0000 Tw
(- Apocalipsis 2 : Bits and Pieces \( http://dev.perl.org/perl6/doc/design/apo/A02.html \) ) Tj
/F20 10 Tf
1 0 0 1 102.0 153.2 Tm
0.0000 Tw
() Tj
ET
q
102 154.2 4 4 re
f
Q
BT
1 0 0 1 110 153.2 Tm
/F20 10 Tf
0.0000 Tw
(- Sinopsis 2 : Bits and Pieces \( http://dev.perl.org/perl6/doc/design/syn/S02.html \) ) Tj
/F20 10 Tf
1 0 0 1 102.0 138.8 Tm
0.0000 Tw
() Tj
ET
q
102 139.8 4 4 re
f
Q
BT
1 0 0 1 110 138.8 Tm
/F20 10 Tf
0.0000 Tw
(- Ex\351gesis 2 : Bits and Pieces \( http://dev.perl.org/perl6/doc/design/exe/E02.html \) ) Tj
/F20 10 Tf
1 0 0 1 102.0 124.4 Tm
0 Tw
() Tj
ET
q
102 125.4 4 4 re
f
Q
BT
1 0 0 1 110 124.4 Tm
/F20 10 Tf
0 Tw
(- Perlguts : introduction to the Perl API \() Tj
1 0 0 1 102.0 112.4 Tm
0.0000 Tw
(http://search.cpan.org/author/NWCLARK/perl-5.8.7/pod/perlguts.pod \) ) Tj
/F20 10 Tf
1 0 0 1 102.0 98.0 Tm
0.0000 Tw
() Tj
ET
q
102 98.9999999999999 4 4 re
f
Q
BT
1 0 0 1 110 97.9999999999999 Tm
/F20 10 Tf
0.0000 Tw
(- PerlGuts Illustrated \( http://gisle.aas.no/perl/illguts/ \) ) Tj
/F21 10 Tf
1 0 0 1 72 37 Tm
(12 March 2006) Tj
1 0 0 1 517.44 37 Tm
(5) Tj
ET
72 50 m
523 50 l
S
endstream
endobj
35 0 obj
5624
endobj
36 0 obj
<<
/ProcSet [/PDF /Text]
/ColorSpace <</DefaultRGB 1 0 R>>
/Font
<<
/F00 6 0 R
/F10 10 0 R
/F20 14 0 R
/F21 15 0 R
/F23 17 0 R
>>
>>
endobj
37 0 obj
<<
/Type /Page
/Parent 4 0 R
/Resources 36 0 R
/Contents 34 0 R
>>
endobj
38 0 obj
<<
/Length 39 0 R
>>
stream
72 792 m
523 792 l
S
BT
0 G
1 i 0 J 0 j 0.1 w 10 M []0 d
/F21 10 Tf
1 0 0 1 72 797 Tm
(Cafe Perl v0.7b) Tj
1 0 0 1 483.56 797 Tm
(pod2pdf) Tj
/F21 10 Tf
1 0 0 1 72 37 Tm
(6) Tj
1 0 0 1 454.63 37 Tm
(12 March 2006) Tj
ET
72 50 m
523 50 l
S
endstream
endobj
39 0 obj
239
endobj
40 0 obj
<<
/ProcSet [/PDF /Text]
/ColorSpace <</DefaultRGB 1 0 R>>
/Font
<<
/F21 15 0 R
>>
>>
endobj
41 0 obj
<<
/Type /Page
/Parent 4 0 R
/Resources 40 0 R
/Contents 38 0 R
>>
endobj
42 0 obj
<<
/Length 43 0 R
>>
stream
S
BT
0 G
1 i 0 J 0 j 0.1 w 10 M []0 d
/F21 10 Tf
/F20 24 Tf
1 0 0 1 202.784 770 Tm
(Table of Contents) Tj
1 0 0 1 214.796 741.2 Tm
(Cafe Perl v0.7b) Tj
/F20 10 Tf
ET
q
0.95 g
72 680.6 451 12 re
f
Q
BT
1 0 0 1 132 683.6 Tm
(Bits and Pieces - Scalars \(Mordiditas de aqu\355 y de all\341\)) Tj
1 0 0 1 487.44 683.6 Tm
(1) Tj
ET
q
1 g
72 668.6 451 12 re
f
Q
BT
1 0 0 1 162 671.6 Tm
(Infograf\355a) Tj
1 0 0 1 487.44 671.6 Tm
(5) Tj
ET
q
0.95 g
72 656.6 451 12 re
f
Q
BT
1 0 0 1 162 659.6 Tm
(- CPAN \( http://www.cpan.org \)) Tj
1 0 0 1 487.44 659.6 Tm
(5) Tj
ET
q
1 g
72 644.6 451 12 re
f
Q
BT
1 0 0 1 162 647.6 Tm
(- M\363dulo Benchmark \( http://search.cpan.org/~nwclark/perl-) Tj
1 0 0 1 487.44 647.6 Tm
(5) Tj
ET
q
0.95 g
72 632.6 451 12 re
f
Q
BT
1 0 0 1 162 635.6 Tm
(- M\363dulo Devel::Peek \(...) Tj
1 0 0 1 487.44 635.6 Tm
(5) Tj
ET
q
1 g
72 620.6 451 12 re
f
Q
BT
1 0 0 1 162 623.6 Tm
(- Pugs \( http://www.pugscode.org \)) Tj
1 0 0 1 487.44 623.6 Tm
(5) Tj
ET
q
0.95 g
72 608.6 451 12 re
f
Q
BT
1 0 0 1 162 611.6 Tm
(- Apocalipsis 2 : Bits and Pieces \() Tj
1 0 0 1 487.44 611.6 Tm
(5) Tj
ET
q
1 g
72 596.6 451 12 re
f
Q
BT
1 0 0 1 162 599.6 Tm
(- Sinopsis 2 : Bits and Pieces \() Tj
1 0 0 1 487.44 599.6 Tm
(5) Tj
ET
q
0.95 g
72 584.6 451 12 re
f
Q
BT
1 0 0 1 162 587.6 Tm
(- Ex\351gesis 2 : Bits and Pieces \() Tj
1 0 0 1 487.44 587.6 Tm
(5) Tj
ET
q
1 g
72 572.6 451 12 re
f
Q
BT
1 0 0 1 162 575.6 Tm
(- Perlguts : introduction to the Perl API) Tj
1 0 0 1 487.44 575.6 Tm
(5) Tj
ET
q
0.95 g
72 560.6 451 12 re
f
Q
BT
1 0 0 1 162 563.6 Tm
(- PerlGuts Illustrated \( http://gisle.aas.no/perl/illguts/ \)) Tj
1 0 0 1 487.44 563.6 Tm
(5) Tj
/F21 10 Tf
1 0 0 1 72 37 Tm
(12 March 2006) Tj
1 0 0 1 520.22 37 Tm
(i) Tj
ET
72 50 m
523 50 l
S
endstream
endobj
43 0 obj
1745
endobj
44 0 obj
<<
/ProcSet [/PDF /Text]
/ColorSpace <</DefaultRGB 1 0 R>>
/Font
<<
/F20 14 0 R
/F21 15 0 R
>>
>>
endobj
45 0 obj
<<
/Type /Page
/Parent 4 0 R
/Resources 44 0 R
/Contents 42 0 R
>>
endobj
46 0 obj
<<
/Length 47 0 R
>>
stream
72 792 m
523 792 l
S
BT
0 G
1 i 0 J 0 j 0.1 w 10 M []0 d
/F21 10 Tf
1 0 0 1 72 797 Tm
(Cafe Perl v0.7b) Tj
1 0 0 1 438.55 797 Tm
(Table of Contents) Tj
/F21 10 Tf
1 0 0 1 72 37 Tm
(ii) Tj
1 0 0 1 454.63 37 Tm
(12 March 2006) Tj
ET
72 50 m
523 50 l
S
endstream
endobj
47 0 obj
250
endobj
48 0 obj
<<
/ProcSet [/PDF /Text]
/ColorSpace <</DefaultRGB 1 0 R>>
/Font
<<
/F21 15 0 R
>>
>>
endobj
49 0 obj
<<
/Type /Page
/Parent 4 0 R
/Resources 48 0 R
/Contents 46 0 R
>>
endobj
50 0 obj
<<
/Type /Page
/Parent 4 0 R
/Resources 53 0 R
/Contents 51 0 R
>>
endobj
51 0 obj
<<
/Length 52 0 R
>>
stream
q
1 0 0 rg
180 626 8 130 re
F
Q
0 G
1 i 0 J 0 j 0.1 w 10 M []0 d
210 626 m
523 626 l
s
BT
/F21 30 Tf
1 0 0 1 210 706 Tm
0 -30 TD
(PeriÛdico de la Comunidad) Tj
T* (Perl de Capital Federal) Tj
0 0 0.8 rg
/F22 30 Tf
( ) Tj
/F21 9 Tf
T* (http://cafe.pm.org/boletines/) Tj
/F03 48 Tf
0 g
1 0 0 1 144.86 371 Tm
(Cafe Perl v0.7b) Tj
ET
endstream
endobj
52 0 obj
330
endobj
53 0 obj
<<
/ProcSet [/PDF /Text]
/ColorSpace <</DefaultRGB 1 0 R>>
/Font
<<
/F03 9 0 R
/F21 15 0 R
/F22 16 0 R
>>
>>
endobj
54 0 obj
<<
/Length 55 0 R
>>
stream
72 792 m
523 792 l
S
BT
0 G
1 i 0 J 0 j 0.1 w 10 M []0 d
/F21 10 Tf
1 0 0 1 72 797 Tm
(Title Page) Tj
1 0 0 1 451.3 797 Tm
(Cafe Perl v0.7b) Tj
/F21 10 Tf
1 0 0 1 72 37 Tm
(12 March 2006) Tj
1 0 0 1 488.54 37 Tm
(Fly leaf) Tj
ET
72 50 m
523 50 l
S
endstream
endobj
55 0 obj
248
endobj
56 0 obj
<<
/ProcSet [/PDF /Text]
/ColorSpace <</DefaultRGB 1 0 R>>
/Font
<<
/F21 15 0 R
>>
>>
endobj
57 0 obj
<<
/Type /Page
/Parent 4 0 R
/Resources 56 0 R
/Contents 54 0 R
>>
endobj
59 0 obj
<<
/Parent 58 0 R
/Dest [45 0 R /Fit]
/Count 11 
/Title (Table of Contents)
>>
endobj
60 0 obj
<<
/Parent 59 0 R
/Dest [21 0 R /FitH 764]
/First 61 0 R
/Last 70 0 R
/Count 10 
/Title (Bits and Pieces - Scalars \(Mordiditas de aqu\355 y de all\341\))
>>
endobj
61 0 obj
<<
/Parent 60 0 R
/Dest [37 0 R /FitH 251.6]
/Next 62 0 R
/Title (Infograf\355a)
>>
endobj
62 0 obj
<<
/Parent 60 0 R
/Dest [37 0 R /FitH 237.2]
/Previous 61 0 R
/Next 63 0 R
/Title (- CPAN \( http://www.cpan.org \))
>>
endobj
63 0 obj
<<
/Parent 60 0 R
/Dest [37 0 R /FitH 222.8]
/Previous 62 0 R
/Next 64 0 R
/Title (- M\363dulo Benchmark \( http://search.cpan.org/~nwclark/perl-)
>>
endobj
64 0 obj
<<
/Parent 60 0 R
/Dest [37 0 R /FitH 208.4]
/Previous 63 0 R
/Next 65 0 R
/Title (- M\363dulo Devel::Peek \( http://search.cpan.org/~ilyaz/Devel-Peek-0.96/Peek.pm)
>>
endobj
65 0 obj
<<
/Parent 60 0 R
/Dest [37 0 R /FitH 194]
/Previous 64 0 R
/Next 66 0 R
/Title (- Pugs \( http://www.pugscode.org \))
>>
endobj
66 0 obj
<<
/Parent 60 0 R
/Dest [37 0 R /FitH 179.6]
/Previous 65 0 R
/Next 67 0 R
/Title (- Apocalipsis 2 : Bits and Pieces \()
>>
endobj
67 0 obj
<<
/Parent 60 0 R
/Dest [37 0 R /FitH 165.2]
/Previous 66 0 R
/Next 68 0 R
/Title (- Sinopsis 2 : Bits and Pieces \()
>>
endobj
68 0 obj
<<
/Parent 60 0 R
/Dest [37 0 R /FitH 150.8]
/Previous 67 0 R
/Next 69 0 R
/Title (- Ex\351gesis 2 : Bits and Pieces \()
>>
endobj
69 0 obj
<<
/Parent 60 0 R
/Dest [37 0 R /FitH 136.4]
/Previous 68 0 R
/Next 70 0 R
/Title (- Perlguts : introduction to the Perl API)
>>
endobj
70 0 obj
<<
/Parent 60 0 R
/Dest [37 0 R /FitH 110]
/Previous 69 0 R
/Title (- PerlGuts Illustrated \( http://gisle.aas.no/perl/illguts/ \))
>>
endobj
58 0 obj
<<
/Type /Outlines
/Count 12
/First 59 0 R
/Last 70 0 R
>>
endobj
3 0 obj
<<
/Type /Catalog
/Pages 4 0 R
/PageMode /UseOutlines
/Outlines 58 0 R
>>
endobj
4 0 obj
<<
/Type /Pages
/Kids [ 50 0 R 57 0 R 45 0 R 49 0 R 21 0 R 25 0 R 29 0 R 33 0 R 37 0 R 41 0 R ]
/Count 10
/MediaBox [0 0 595 842]
>>
endobj
xref
0 71
0000000000 65535 f 
0000000015 00000 n 
0000000171 00000 n 
0000034452 00000 n 
0000034541 00000 n 
0000000275 00000 n 
0000002375 00000 n 
0000002474 00000 n 
0000002572 00000 n 
0000002672 00000 n 
0000002776 00000 n 
0000002872 00000 n 
0000002973 00000 n 
0000003077 00000 n 
0000003185 00000 n 
0000003283 00000 n 
0000003386 00000 n 
0000003492 00000 n 
0000003606 00000 n 
0000008797 00000 n 
0000008818 00000 n 
0000008943 00000 n 
0000009026 00000 n 
0000013549 00000 n 
0000013570 00000 n 
0000013695 00000 n 
0000013778 00000 n 
0000018559 00000 n 
0000018580 00000 n 
0000018705 00000 n 
0000018788 00000 n 
0000022368 00000 n 
0000022389 00000 n 
0000022514 00000 n 
0000022597 00000 n 
0000028275 00000 n 
0000028296 00000 n 
0000028445 00000 n 
0000028528 00000 n 
0000028821 00000 n 
0000028841 00000 n 
0000028943 00000 n 
0000029026 00000 n 
0000030825 00000 n 
0000030846 00000 n 
0000030960 00000 n 
0000031043 00000 n 
0000031347 00000 n 
0000031367 00000 n 
0000031469 00000 n 
0000031552 00000 n 
0000031635 00000 n 
0000032019 00000 n 
0000032039 00000 n 
0000032164 00000 n 
0000032466 00000 n 
0000032486 00000 n 
0000032588 00000 n 
0000034377 00000 n 
0000032671 00000 n 
0000032766 00000 n 
0000032940 00000 n 
0000033040 00000 n 
0000033176 00000 n 
0000033342 00000 n 
0000033526 00000 n 
0000033664 00000 n 
0000033804 00000 n 
0000033941 00000 n 
0000034081 00000 n 
0000034226 00000 n 
trailer
<<
/Size 71
/Root 3 0 R
/Info 2 0 R
>>
startxref
34689
%%EOF
